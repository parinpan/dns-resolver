// Code generated by mockery v2.14.0. DO NOT EDIT.

package dns

import (
	context "context"

	dns "github.com/miekg/dns"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// dnsResolverClientMock is an autogenerated mock type for the dnsResolverClientMock type
type dnsResolverClientMock struct {
	mock.Mock
}

// ExchangeContext provides a mock function with given fields: ctx, m, a
func (_m *dnsResolverClientMock) ExchangeContext(ctx context.Context, m *dns.Msg, a string) (*dns.Msg, time.Duration, error) {
	ret := _m.Called(ctx, m, a)

	var r0 *dns.Msg
	if rf, ok := ret.Get(0).(func(context.Context, *dns.Msg, string) *dns.Msg); ok {
		r0 = rf(ctx, m, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dns.Msg)
		}
	}

	var r1 time.Duration
	if rf, ok := ret.Get(1).(func(context.Context, *dns.Msg, string) time.Duration); ok {
		r1 = rf(ctx, m, a)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *dns.Msg, string) error); ok {
		r2 = rf(ctx, m, a)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTnewDnsResolverClient interface {
	mock.TestingT
	Cleanup(func())
}

// newDnsResolverClientMock creates a new instance of dnsResolverClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newDnsResolverClientMock(t mockConstructorTestingTnewDnsResolverClient) *dnsResolverClientMock {
	mock := &dnsResolverClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
