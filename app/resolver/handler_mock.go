// Code generated by mockery v2.14.0. DO NOT EDIT.

package resolver

import (
	context "context"

	dns "github.com/parinpan/dns-resolver/pkg/dns"
	mock "github.com/stretchr/testify/mock"
)

// resolverServiceMock is an autogenerated mock type for the resolverService type
type resolverServiceMock struct {
	mock.Mock
}

// Resolve provides a mock function with given fields: ctx, question
func (_m *resolverServiceMock) Resolve(ctx context.Context, question dns.Question) (DataGroup, error) {
	ret := _m.Called(ctx, question)

	var r0 DataGroup
	if rf, ok := ret.Get(0).(func(context.Context, dns.Question) DataGroup); ok {
		r0 = rf(ctx, question)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DataGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dns.Question) error); ok {
		r1 = rf(ctx, question)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveNS provides a mock function with given fields: ctx, question
func (_m *resolverServiceMock) ResolveNS(ctx context.Context, question dns.Question) (DataGroupWithNS, error) {
	ret := _m.Called(ctx, question)

	var r0 DataGroupWithNS
	if rf, ok := ret.Get(0).(func(context.Context, dns.Question) DataGroupWithNS); ok {
		r0 = rf(ctx, question)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DataGroupWithNS)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dns.Question) error); ok {
		r1 = rf(ctx, question)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewResolverServiceMock interface {
	mock.TestingT
	Cleanup(func())
}

// newResolverServiceMock creates a new instance of resolverServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newResolverServiceMock(t mockConstructorTestingTnewResolverServiceMock) *resolverServiceMock {
	mock := &resolverServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
